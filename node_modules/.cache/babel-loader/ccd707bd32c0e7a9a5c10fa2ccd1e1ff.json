{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alignProperty = alignProperty;\nexports.convertLength = convertLength;\nexports.fontGrid = fontGrid;\nexports.getUnit = getUnit;\nexports.isUnitless = isUnitless;\nexports.responsiveProperty = responsiveProperty;\nexports.toUnitless = toUnitless;\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\n\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\n\nfunction toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\n\nfunction convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\n\nfunction alignProperty(_ref) {\n  let {\n    size,\n    grid\n  } = _ref;\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\n\nfunction fontGrid(_ref2) {\n  let {\n    lineHeight,\n    pixels,\n    htmlFontSize\n  } = _ref2;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\n\nfunction responsiveProperty(_ref3) {\n  let {\n    cssProperty,\n    min,\n    max,\n    unit = 'rem',\n    breakpoints = [600, 900, 1200],\n    transform = null\n  } = _ref3;\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}","map":{"version":3,"sources":["D:/Full Stack Projects/ajmera-infotech/books-frontend/node_modules/@mui/material/node/styles/cssUtils.js"],"names":["Object","defineProperty","exports","value","alignProperty","convertLength","fontGrid","getUnit","isUnitless","responsiveProperty","toUnitless","String","parseFloat","length","input","match","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","size","grid","sizeBelow","sizeAbove","lineHeight","pixels","htmlFontSize","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alignProperty = alignProperty;\nexports.convertLength = convertLength;\nexports.fontGrid = fontGrid;\nexports.getUnit = getUnit;\nexports.isUnitless = isUnitless;\nexports.responsiveProperty = responsiveProperty;\nexports.toUnitless = toUnitless;\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nfunction toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nfunction convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nfunction alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nfunction fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\nfunction responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}"]},"metadata":{},"sourceType":"script"}